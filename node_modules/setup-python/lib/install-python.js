"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installCpythonFromRelease = exports.findReleaseFromManifest = exports.MANIFEST_URL = void 0;
const path = __importStar(require("path"));
const core = __importStar(require("@actions/core"));
const tc = __importStar(require("@actions/tool-cache"));
const exec = __importStar(require("@actions/exec"));
const TOKEN = core.getInput('token');
const AUTH = !TOKEN || isGhes() ? undefined : `token ${TOKEN}`;
const MANIFEST_REPO_OWNER = 'actions';
const MANIFEST_REPO_NAME = 'python-versions';
const MANIFEST_REPO_BRANCH = 'main';
exports.MANIFEST_URL = `https://raw.githubusercontent.com/${MANIFEST_REPO_OWNER}/${MANIFEST_REPO_NAME}/${MANIFEST_REPO_BRANCH}/versions-manifest.json`;
const IS_WINDOWS = process.platform === 'win32';
const IS_LINUX = process.platform === 'linux';
function findReleaseFromManifest(semanticVersionSpec, architecture) {
    return __awaiter(this, void 0, void 0, function* () {
        const manifest = yield tc.getManifestFromRepo(MANIFEST_REPO_OWNER, MANIFEST_REPO_NAME, AUTH, MANIFEST_REPO_BRANCH);
        return yield tc.findFromManifest(semanticVersionSpec, false, manifest, architecture);
    });
}
exports.findReleaseFromManifest = findReleaseFromManifest;
function installPython(workingDirectory) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = {
            cwd: workingDirectory,
            env: Object.assign(Object.assign({}, process.env), (IS_LINUX && { LD_LIBRARY_PATH: path.join(workingDirectory, 'lib') })),
            silent: true,
            listeners: {
                stdout: (data) => {
                    core.info(data.toString().trim());
                },
                stderr: (data) => {
                    core.error(data.toString().trim());
                }
            }
        };
        if (IS_WINDOWS) {
            yield exec.exec('powershell', ['./setup.ps1'], options);
        }
        else {
            yield exec.exec('bash', ['./setup.sh'], options);
        }
    });
}
function installCpythonFromRelease(release) {
    return __awaiter(this, void 0, void 0, function* () {
        const downloadUrl = release.files[0].download_url;
        core.info(`Download from "${downloadUrl}"`);
        const pythonPath = yield tc.downloadTool(downloadUrl, undefined, AUTH);
        core.info('Extract downloaded archive');
        let pythonExtractedFolder;
        if (IS_WINDOWS) {
            pythonExtractedFolder = yield tc.extractZip(pythonPath);
        }
        else {
            pythonExtractedFolder = yield tc.extractTar(pythonPath);
        }
        core.info('Execute installation script');
        yield installPython(pythonExtractedFolder);
    });
}
exports.installCpythonFromRelease = installCpythonFromRelease;
function isGhes() {
    const ghUrl = new URL(process.env['GITHUB_SERVER_URL'] || 'https://github.com');
    return ghUrl.hostname.toUpperCase() !== 'GITHUB.COM';
}
